<?php
/**
 * @file
 * Adds Remove button to Media Recorder widget.
 */

/**
 * Implements hook_element_info_alter().
 *
 * @param array $type
 */
function ywp_media_recorder_element_info_alter(&$type) {
  $type['media_recorder']['#process'][] = 'ywp_media_recorder_element_process';
  $type['media_recorder']['#pre_render'][] = 'ywp_media_recorder_element_pre_render';
}

/**
 * Process callback for the media_recorder form element.
 *
 * @param array $element
 * @param array $form_state
 * @param array $form
 *
 * @return array
 *
 * @see media_recorder_element_info()
 * @see file_managed_file_process()
 */
function ywp_media_recorder_element_process($element, &$form_state, $form) {
  $original_id = $element['#id'];
  $element['remove_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove_button',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    '#submit' => array('ywp_media_recorder_element_remove_button_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => array(
      'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
      'wrapper' => $original_id . '-ajax-wrapper',
      'effect' => 'fade',
    ),
    '#attributes' => array(
      'class' => array(
        'button-remove',
      ),
    ),
    '#weight' => -5,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'ywp_media_recorder') . '/css/ywp_media_recorder.css'),
    ),
  );

  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $original_id . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * #pre_render callback to hide display of the remove button.
 *
 * @param array $element
 *
 * @return array
 *
 * @see ywp_media_recorder_element_info_alter()
 * @see file_managed_file_pre_render()
 */
function ywp_media_recorder_element_pre_render($element) {
  // If we don't already have a file, there is nothing to remove.
  if (empty($element['#value']['fid'])) {
    $element['remove_button']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Form submission handler for remove buttons of media_recorder elements.
 *
 * @param $form
 * @param $form_state
 *
 * @see ywp_media_recorder_element_process()
 * @see file_managed_file_submit()
 */
function ywp_media_recorder_element_remove_button_submit($form, &$form_state) {
  // Determine whether it was the upload or the remove button that was clicked,
  // and set $element to the managed_file element that contains that button.
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // Update both $form_state['values'] and $form_state['input'] to reflect
  // that the file has been removed, so that the form is rebuilt correctly.
  form_set_value($element, NULL, $form_state);
  drupal_array_set_nested_value($form_state['input'], $element['#parents'], NULL);

  // Set the form to rebuild so that $form is correctly updated in response to
  // processing the file removal.
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * @param array $element
 * @param array $form_state
 * @param array $context
 */
function ywp_media_recorder_field_widget_form_alter(&$element, &$form_state, $context) {
  if($context['instance']['widget']['type'] == 'media_recorder') {
    foreach($element as $delta => $widget) {
      $element[$delta]['#process'][] = 'ywp_media_recorder_widget_process';
    }
  }
}

/**
 * A widget #process callback for the media_recorder field type.
 *
 * @param array $element
 * @param array$form_state
 * @param array $form
 *
 * @return array
 *
 * @see ywp_media_recorder_field_widget_form_alter()
 * @see file_field_widget_process()
 */
function ywp_media_recorder_widget_process($element, &$form_state, $form) {
  $element['remove_button']['#submit'][] = 'ywp_media_recorder_widget_remove_button_submit';
  $element['remove_button']['#limit_validation_errors'] = array(array_slice($element['#parents'], 0, -1));

  return $element;
}

/**
 * Form submission handler for remove button of media_recorder_field_widget_form().
 *
 * This runs in addition to and after ywp_media_recorder_element_remove_button_submit().
 *
 * @see ywp_media_recorder_widget_process()
 * @see file_field_widget_submit()
 */
function ywp_media_recorder_widget_remove_button_submit($form, &$form_state) {
  // During the form rebuild, file_field_widget_form() will create field item
  // widget elements using re-indexed deltas, so clear out $form_state['input']
  // to avoid a mismatch between old and new deltas. The rebuilt elements will
  // have #default_value set appropriately for the current state of the field,
  // so nothing is lost in doing this.
  $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);
  drupal_array_set_nested_value($form_state['input'], $parents, NULL);

  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  $submitted_values = drupal_array_get_nested_value($form_state['values'], array_slice($button['#parents'], 0, -2));
  foreach ($submitted_values as $delta => $submitted_value) {
    if (!$submitted_value['fid']) {
      unset($submitted_values[$delta]);
    }
  }

  // Re-index deltas after removing empty items.
  $submitted_values = array_values($submitted_values);

  // Update form_state values.
  drupal_array_set_nested_value($form_state['values'], array_slice($button['#parents'], 0, -2), $submitted_values);

  // Update items.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $field_state['items'] = $submitted_values;
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
}
