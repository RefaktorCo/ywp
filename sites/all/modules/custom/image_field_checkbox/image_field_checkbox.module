<?php

/**
 * @file
 * Provides a checkbox_value textarea for image fields.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function image_field_checkbox_theme_registry_alter(&$theme_registry) {
  // Override the image_formatter function and add checkbox_value as a variable to be
  // assembled by theme().
  $theme_registry['image_formatter']['theme path'] = drupal_get_path('module', 'image_field_checkbox');
  $theme_registry['image_formatter']['function'] = 'image_field_checkbox_image_formatter';
  $theme_registry['picture_formatter']['function'] = 'image_field_checkbox_picture_formatter';
  $theme_registry['picture_sizes_formatter']['function'] = 'image_field_checkbox_picture_sizes_formatter';
}

/**
 * Override of theme_image_formatter().
 */
function image_field_checkbox_image_formatter($variables) {
  $image = theme_image_formatter($variables);
  // Now that Drupal has rendered the image, if there was a checkbox_value let's
  // render the image and the checkbox_value, otherwise just return the already
  // rendered image.
  if (isset($variables['item']['image_field_checkbox']) && !empty($variables['item']['image_field_checkbox']['value'])) {
    return theme('image_field_checkbox', array(
      'image' => $image,
      'checkbox_value' => $variables['item']['image_field_checkbox']['value'],
    ));
  }
  else {
    return $image;
  }
}

/**
 * Override of theme_picture_formatter().
 */
function image_field_checkbox_picture_formatter($variables) {
  $image = theme_picture_formatter($variables);
  // Now that Drupal has rendered the image, if there was a checkbox_value let's
  // render the image and the checkbox_value, otherwise just return the already
  // rendered image.
  if (isset($variables['item']['image_field_checkbox']) && !empty($variables['item']['image_field_checkbox']['value'])) {
    return theme('image_field_checkbox', array(
      'image' => $image,
      'checkbox_value' => $variables['item']['image_field_checkbox']['value'],
    ));
  }
  else {
    return $image;
  }
}

/**
 * Override of theme_picture_sizes_formatter().
 */
function image_field_checkbox_picture_sizes_formatter($variables) {
  $image = theme_picture_sizes_formatter($variables);
  // Now that Drupal has rendered the image, if there was a checkbox_value let's
  // render the image and the checkbox_value, otherwise just return the already
  // rendered image.
  if (isset($variables['item']['image_field_checkbox']) && !empty($variables['item']['image_field_checkbox']['value'])) {
    return theme('image_field_checkbox', array(
      'image' => $image,
      'checkbox_value' => $variables['item']['image_field_checkbox']['value'],
    ));
  }
  else {
    return $image;
  }
}

/**
 * Implements hook_theme().
 */
function image_field_checkbox_theme($existing, $type, $theme, $path) {
  return array(
    'image_field_checkbox' => array(
      'template' => 'image_field_checkbox',
      'variables' => array('image' => NULL, 'checkbox_value' => NULL),
    ),
  );
}

/**
 * Given an entity type and bundle name, this will return an associative array
 * of image field info instances, keyed by image field machine names. Returns
 * null if no image fields are found.
 */
function image_field_checkbox_get_image_fields($entity_type = NULL, $bundle = NULL) {
  // TODO: As of Drupal 7.22 use field_info_field_map() instead of field_info_instances();
  $image_fields = array();
  $fields = field_info_field_map($entity_type, $bundle);


  foreach ($fields as $field_name => $field) {
    // Skip any deleted and non image widget fields.
    if ($field['deleted'] == 1) {
      continue;
    }

    $field_info = field_info_field($field_name);
    if ($field_info['type'] != 'image') {
      continue;
    }
    $image_fields[$field_name] = $field;
  }

  return $image_fields;
}


/**
 * Implements hook_form_alter().
 */
function image_field_checkbox_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $instance = $form['#instance'];
  $field = $form['#field'];

  if ($field['type'] == 'image') {
    $field = $form['#field'];
    if (empty($form['instance']['settings'])) {
      $form['instance']['settings'] = array();
    }
    $form['instance']['settings'] += image_field_checkbox_field_instance_settings_form($field, $instance);
  }
}

/**
 * Configuration form for editing insert settings for a field instance.
 */
function image_field_checkbox_field_instance_settings_form($field, $instance) {
  $form['image_field_checkbox'] = array(
    '#type' => 'fieldset',
    '#title' => t('Checkbox Settings'),
    '#weight' => 12,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['image_field_checkbox']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Checkbox'),
    '#default_value' => $instance['settings']['image_field_checkbox']['enabled'],
    '#description' => t('Adds an extra text area for captions on image fields.'),
    '#weight' => 12,
  );


  return $form;
}

function image_field_checkbox_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add display_field setting to field because file_field_widget_form() assumes it is set.
  $instance = $context['instance'];
  $settings = $instance['settings'];
  $field = $context['field'];
  if (isset($settings['image_field_checkbox']['enabled']) && $field['type'] == 'image' && $settings['image_field_checkbox']['enabled']) {
    foreach (element_children($element) as $delta) {
      // Add all extra functionality provided by the image widget.
      $element[$delta]['#process'][] = 'image_field_checkbox_widget_process';
   }
  }
}

/**
 * An element #process callback for the image field type.
 *
 * Expands the image type to include the checkbox_value.
 */
function image_field_checkbox_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];
  // Add the checkbox_value field with its value and text format. If there is no file
  // uri then we'll use the instance setting defaults, otherwise there is no
  // way to tell if this is a new image or not.
  $element['image_field_checkbox'] = array(
    '#title' => t('Show in Gallery'),
    '#type' => 'checkbox',
    '#default_value' => isset($item['image_field_checkbox']['value']) ? $item['image_field_checkbox']['value'] : 0,
    '#access' => (bool) $item['fid'],
  );

  return $element;
}

function image_field_checkbox_field_info_alter(&$info) {
  // Add a setting to all field types.
  foreach ($info as $field_type => $field_type_info) {
    if ($field_type == 'image') {
      $info['image']['instance_settings'] += array(
        'image_field_checkbox' => array(
          'enabled' => 0,
        ),
        'image_field_checkbox_wrapper' => array(
          'image_field_checkbox_default' => array(
            'value' => 0,
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_field_attach_insert().
 */
function image_field_checkbox_field_attach_insert($entity_type, $entity) {
  image_field_checkbox_field_attach_update($entity_type, $entity);
}

/**
 * Implements hook_field_attach_update().
 */
function image_field_checkbox_field_attach_update($entity_type, $entity) {
  list($id, $bundle) = entity_extract_ids($entity_type, $entity);

  $image_fields = image_field_checkbox_get_image_fields($entity_type, $bundle);
  foreach ($image_fields as $field_name => $image_field) {
    // Skip the checkbox_value when it isn't present, or if it is disabled.
//    if (
//      !isset($image_field['settings']['image_field_checkbox']) ||
//      !$image_field['settings']['image_field_checkbox']['enabled']
//    ) { continue; }
    $field = field_info_field($field_name);
    $table_name = 'field_image_field_checkbox';

    $all_languages = field_available_languages($entity_type, $field);
    if (!isset($entity->$field_name)) { continue; }
    $field_languages = array_intersect($all_languages, array_keys((array) $entity->$field_name));

    // Delete and insert, rather than update, in case a value was added.
    // Delete languages present in the incoming $entity->$field_name.
    // Delete all languages if $entity->$field_name is empty.
    $languages = !empty($entity->$field_name) ? $field_languages : $all_languages;
    if ($languages) {
      db_delete($table_name)
        ->condition('field_name', $field_name)
        ->condition('entity_type', $entity_type)
        ->condition('entity_id', $id)
        ->condition('language', $languages, 'IN')
        ->execute();

    }

    // Prepare the multi-insert query.
    $do_insert = FALSE;
    $columns = array('field_name', 'entity_type', 'entity_id',  'bundle', 'delta', 'language', 'checkbox_value');
    $query = db_insert($table_name)->fields($columns);
    foreach ($field_languages as $langcode) {
      $items = (array) $entity->{$field_name}[$langcode];
      $delta_count = 0;
      foreach ($items as $delta => $item) {

       // if (empty($item['image_field_checkbox']['value'])) { continue; }
        // We now know we have someting to insert.
        $do_insert = TRUE;
        $record = array(
          'field_name' => $field_name,
          'entity_type' => $entity_type,
          'entity_id' => $id,
          'bundle' => $item['fid'] ? $item['fid'] : $bundle,
          'delta' => $delta,
          'language' => $langcode,
          'checkbox_value' => $item['image_field_checkbox']['value'] ? $item['image_field_checkbox']['value'] : 0,
        );
        //drupal_set_message('<pre>'. print_r($item, true) .'</pre>');
        $query->values($record);
        if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED && ++$delta_count == $field['cardinality']) {
          break;
        }
      }
    }

    // Execute the query if we have values to insert.
    if ($do_insert) {
      $query->execute();
    }
  }
}

/**
 * Implements hook_field_attach_load().
 */
function image_field_checkbox_field_attach_load($entity_type, $entities, $age, $options) {
  foreach ($entities as $entity) {
    list($id, $bundle) = entity_extract_ids($entity_type, $entity);

    $table =  'field_image_field_checkbox';

    $query = db_select($table, 't')
      ->fields('t')
      ->condition('entity_type', $entity_type)
      ->condition( 'entity_id' , $id)
      ->orderBy('delta');

    $results = $query->execute();

    foreach ($results as $row) {
      $field = field_info_instance($entity_type, $row->field_name, $bundle);
//      if (
//        !isset($field['settings']['image_field_checkbox']) ||
//        !$field['settings']['image_field_checkbox']['enabled']
//      ) { continue; }

      $item['image_field_checkbox']['value'] = $row->checkbox_value;

      // Add the item to the field values for the entity.
      $entities[$row->entity_id]->{$row->field_name}[$row->language][$row->delta]['image_field_checkbox']['value'] = $row->checkbox_value;
    }
  }
}

/**
 * Implements hook_field_attach_delete().
 */
function image_field_checkbox_field_attach_delete($entity_type, $entity) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    image_field_checkbox_field_attach_purge($entity_type, $entity, $field, $instance);
  }
}

/**
 * Implements hook_field_attach_purge().
 */
function image_field_checkbox_field_attach_purge($entity_type, $entity, $field, $instance) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  $field_name = is_object($field) ? $field->field_name : $field['field_name'];

  $table_name = 'field_image_field_checkbox';
  db_delete($table_name)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $id)
    ->condition('field_name', $field_name)
    ->execute();
}


/**
 * Implements field_diff_view_alter().
 */
function image_field_checkbox_field_diff_view_alter(&$values, $items, $context) {
  $field = $context['field'];
  $instance = $context['instance'];
  $settings = $context['settings'];

  // Only handle image fields
  if ($field['type'] != 'image' || !$instance['settings']['image_field_checkbox']) {
    return;
  }

  foreach ($items as $delta => $item) {

    if (!is_array($values[$delta])) {
      $values[$delta] = array($values[$delta]);
    }


    // Allow users to optionally clean system specific characters.
    $values[$delta][] = diff_normalise_text($item['image_field_checkbox']['value']);
  }
}






/**
 * Implements hook_menu().
 */
function image_field_checkbox_menu() {

  $items['admin/gallery-images'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Gallery images list'),
    'description' => 'Gallery images list',
    'page callback' => 'image_field_checkbox_listing_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  return $items;
}


/**
 * Page callback.
 */
function image_field_checkbox_listing_page() {
  $content = "<table id='gallery-table' class='views-table cols-3'>
          <thead>
          <tr>
          <th>ID</th>
          <th>Title</th>
          <th>images</th>
          <th>edit</th>
          </tr>
          </thead>
          <tbody>";

$result = db_query('SELECT bundle, entity_id, checkbox_value FROM {field_image_field_checkbox}
        WHERE checkbox_value = 1 ' )->fetchAll();

$gallery = array();
 //print_r($result);
foreach ($result as $key => $item) {
   $gallery[$item->entity_id][$key] = $item;
}

ksort($gallery, SORT_NUMERIC);

foreach ($gallery as $id => $images) {
  print_r($record);
  $node = node_load($id);
  $options = array('absolute' => TRUE);
  $url = url('node/' . $id, $options);
  $images_styled = '';
  
  foreach ($images as $key => $image_id) {
    $image = file_load($image_id->bundle);
    


    $image_styled= theme('image_style',
      array(
        'style_name' => '100x50',
        'path' => $image->uri,
        'getsize' =>FALSE
      )
    );
    $images_styled .= $image_styled . ' ';
}


 $content .= "<tr>";

  $content .="<td>$id</td>
          <td><a href='$url'>$node->title</a></td>
          <td>$images_styled</td>
          <td><a href='/node/$id/edit'>edit</a></td>";

 $content .= "</tr>";
}

$content .= "</tbody></table>";
  return $content;
}



/**
 * Implements hook_block_info().
 */
function image_field_checkbox_block_info() {
  // This example comes from node.module.
  $blocks['gallery_images'] = array(
    'info' => t('Gallery'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function image_field_checkbox_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'gallery_images':
      $block['subject'] = t('The Gallery');
      $block['content'] = gallery_images_block_view();
      break;
  }
  return $block;
}

/**
 * block view.
 */
function gallery_images_block_view(){
  global $user;
  $content = "<div class='gallery-wrap'>";
  if (in_array('administrator', $user->roles)){
    $content .= "<div class='view-header'><a href='/admin/gallery-images'>[Change]</a></div>";
  }
  $content .= "<div class='owl-carousel owl-theme'>";
  $result = db_query('SELECT bundle, entity_id, checkbox_value FROM {field_image_field_checkbox} WHERE checkbox_value = 1');
  foreach ($result as $record) {
    $image = file_load($record->bundle);
    $image_styled= theme('image_style',
      array(
        'style_name' => 'oyster_portfolio_columns',
        'path' => $image->uri,
        'getsize' =>FALSE
      )
    );

    $content .="<div class='gallery-item'>$image_styled</div>";
  }

  $content .= "</div></div>";
  return $content;
}


/**
 * Implements hook_page_build().
 */
function image_field_checkbox_page_build(&$page) {
  // check current path
  if (path_is_admin(current_path())) {
    // add CSS
    drupal_add_css(drupal_get_path('module', 'image_field_checkbox') . '/css/styles.css', array('group' => CSS_THEME));
  }
}
