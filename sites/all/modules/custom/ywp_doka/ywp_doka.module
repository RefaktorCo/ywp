<?php
/**
 * @file
 * Provides a filefield source that uses Doka editor to prepare image before uploading.
 */

/**
 * Implements hook_module_implements_alter().
 *
 * @noinspection PhpUnused
 */
function ywp_doka_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'field_widget_info_alter' || $hook == 'form_alter') {
    if (isset($implementations['ywp_doka'])) {
      $group = $implementations['ywp_doka'];
      unset($implementations['ywp_doka']);
      $implementations['ywp_doka'] = $group;
    }
  }
}

/**
 * Implements hook_menu().
 *
 * @noinspection PhpUnused
 */
function ywp_doka_menu() {
  $items['ywp-doka-handle-uploads'] = array(
    'title' => 'Doka uploads',
    'page callback' => 'ywp_doka_handle_uploads',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Callback that handles and saves uploaded files.
 */
function ywp_doka_handle_uploads() {
  global $user;

  // Check that the destination is writable.
  $temp_directory = 'temporary://';
  if (!file_prepare_directory($temp_directory)) {
    watchdog('file', 'The directory %directory is not writable, because it does not have the correct permissions set.', array('%directory' => drupal_realpath($temp_directory)));
    _ywp_doka_send_error('Temporary directory is not writable.');
  }

  // Try to make sure this is private via htaccess.
  file_create_htaccess($temp_directory);

  // Create a directory with unique name to place a file into.
  $temp_directory .= 'doka_' . $user->uid . '_' . REQUEST_TIME . '/';
  if (!file_prepare_directory($temp_directory, FILE_CREATE_DIRECTORY)) {
    watchdog('file', 'The directory %directory is not writable, because it does not have the correct permissions set.', array('%directory' => drupal_realpath($temp_directory)));
    _ywp_doka_send_error('Temporary directory is not writable.');
  }

  // Get the filename.
  $file_name = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';
  if (!$file_name) {
    _ywp_doka_send_error('Filename is not specified.');
  }

  // Look for the content type header.
  if (isset($_SERVER["CONTENT_TYPE"])) {
    $content_type = $_SERVER["CONTENT_TYPE"];
  }
  elseif (isset($_SERVER["HTTP_CONTENT_TYPE"])) {
    $content_type = $_SERVER["HTTP_CONTENT_TYPE"];
  }
  else {
    $content_type = '';
  }

  // Is this a multipart upload?.
  if (strpos($content_type, 'multipart') !== FALSE) {
    if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {
      // Open temp file.
      if ($out = fopen($temp_directory . ''. $file_name, 'ab')) {
        // Read binary input stream and append it to temp file.
        if ($in = fopen($_FILES['file']['tmp_name'], 'rb')) {
          while ($buff = fread($in, 4096)) {
            fwrite($out, $buff);
          }
          fclose($in);
        }
        else {
          _ywp_doka_send_error('Failed to open input stream.');
        }

        // Save file metadata as we need its path to be returned.
        $meta_data = stream_get_meta_data($out);

        // Close the files afterwards.
        fclose($out);
        drupal_unlink($_FILES['file']['tmp_name']);

        // Return file path.
        $path = drupal_realpath($meta_data['uri']);
        die(drupal_json_encode(['path' => $path]));
      }
      else {
        _ywp_doka_send_error('Failed to open output stream.');
      }
    }
    else {
      _ywp_doka_send_error('No file provided.');
    }
  }
  else {
    _ywp_doka_send_error('Incorrect content type.');
  }
}

/**
 * Sends an error to the client.
 *
 * @param string $error
 *   The error to send.
 */
function _ywp_doka_send_error($error) {
  die(drupal_json_encode(['error' => $error]));
}

/**
 * Implements hook_libraries_info().
 *
 * @noinspection PhpUnused
 */
function ywp_doka_libraries_info() {
  $libraries = array();

  $libraries['doka'] = array(
    'name' => 'Doka image editor',
    'vendor url' => 'https://pqina.nl/doka/',
    'version' => '7.5.0',
    'files' => array(
      'js' => array(
        'packages/doka/doka-umd.js',
      ),
      'css' => array(
        'packages/doka/doka.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_filefield_sources_info().
 *
 * @noinspection PhpUnused
 */
function ywp_doka_filefield_sources_info() {
  $source = array();
  $source['doka'] = array(
    'name' => t('Doka image editor'),
    'label' => t('Edit and upload'),
    'description' => t('Edit images before uploading using Doka editor.'),
    'process' => 'ywp_doka_filefield_source_process',
    'value' => 'ywp_doka_filefield_source_value',
    'weight' => -20,
  );
  return $source;
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * @noinspection PhpUnused
 */
function ywp_doka_field_widget_info_alter(&$info) {
  if (isset($info['image_image'])) {
    $info['image_image']['settings']['filefield_sources']['source_doka']['options'] = NULL;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for field edit form.
 *
 * @noinspection PhpUnusedParameterInspection
 * @noinspection PhpUnused
 */
function ywp_doka_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $instance = $form['#instance'];
  if ($instance['widget']['type'] == 'image_image') {
    $sources = &$form['instance']['widget']['settings']['filefield_sources'];
    $settings = $instance['widget']['settings']['filefield_sources']['source_doka'];

    $sources['source_doka'] = array(
      '#title' => t('Doka image editor settings'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
//      '#element_validate' => array('_filefield_source_attach_file_path_validate'),
      '#weight' => 10,
    );
    $sources['source_doka']['options'] = array(
      '#type' => 'textarea',
      '#title' => t('Doka options'),
      '#default_value' => $settings['options'],
      '#description' => t('The JSON of Doka options object.'),
    );
  }
}

/**
 * A #process callback to extend the filefield_widget element type.
 *
 * @noinspection PhpUnused
 */
function ywp_doka_filefield_source_process($element, $form_state, $form) {
  $module_path = drupal_get_path('module', 'ywp_doka');

  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['widget']['settings']['filefield_sources']['source_doka'];
  $options = isset($settings['options']) ? $settings['options'] : NULL;

  // Attach required library and a custom JS handler.
  $element['#attached']['libraries_load'][] = array('doka');
  $element['#attached']['js'][] = $module_path . '/js/ywp_doka.init.js';
  $element['#attached']['js'][] = $module_path . '/js/ywp_doka.filefield_source.js';

  // Add Doka options, if any.
  if ($options) {
    $element['#attached']['js'][] = array(
      'data' => array('dokaSettings' => $options),
      'type' => 'setting',
    );
  }

  $element['filefield_doka'] = array(
    '#weight' => 90,
    '#prefix' => '<div class="filefield-source filefield-source-doka clearfix">',
    '#suffix' => '</div>',
    '#filefield_source' => TRUE, // Required for proper theming.
  );

  $element['filefield_doka']['select'] = array(
    '#type' => 'button',
    '#value' => t('Select file'),
    '#attributes' => array(
      'class' => array('filefield-source-doka-select'),
    ),
  );

  $element['filefield_doka']['filename'] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'class' => array('filefield-source-doka-filename'),
    ),
  );

  $element['filefield_doka']['file'] = array(
    '#type' => 'file',
    '#attributes' => array(
      'class' => array('filefield-source-doka-file', 'element-hidden'),
    ),
  );

  $element['filefield_doka']['upload'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#ajax' => array(
      'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
      'wrapper' => $element['upload_button']['#ajax']['wrapper'],
      'effect' => 'fade',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Uploading file...'),
      ),
    ),
    '#validate' => array(),
    '#submit' => array('filefield_sources_field_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#attributes' => array(
      'class' => array('filefield-source-doka-submit', 'element-hidden'),
    ),
  );

  return $element;
}

/**
 * A #filefield_value_callback function.
 *
 * @see filefield_source_clipboard_value()
 * @noinspection PhpUnused
 */
function ywp_doka_filefield_source_value($element, &$item) {
  // Reuse filefield_source_attach_value() as it implements exactly the same
  // logic but with a different top-level key.
  if (!empty($item['filefield_doka']['filename'])) {
    module_load_include('inc', 'filefield_sources', 'sources/attach');
    $item['filefield_attach'] = $item['filefield_doka'];
    filefield_source_attach_value($element, $item);
    unset($item['filefield_attach']);
  }
}
